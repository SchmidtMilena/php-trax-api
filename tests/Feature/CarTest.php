<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Models\Car;
use App\Models\User;
use App\Services\Repositories\Contracts\CarRepositoryContract;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Laravel\Passport\Passport;
use Symfony\Component\HttpFoundation\Response;
use Tests\TestCase;
use Mockery;

class CarTest extends TestCase
{
    use RefreshDatabase;

    private const URL_PATTERN = '/api/car/%s';

    private $authUser;
    private $user;
    private $car;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->authUser = factory(User::class)->create();
        $this->user = factory(User::class)->create();
        $this->car = factory(Car::class)->create(['user_id' => $this->user->id]);
    }

    public function testUserCantSeeCarsThatDontBelongToIt(): void
    {
        Passport::actingAs($this->authUser);

        $carId = $this->car->id;
        $response = $this->actingAs($this->authUser)->call('GET', sprintf(self::URL_PATTERN, $carId));

        $response->assertStatus(Response::HTTP_NOT_FOUND);
    }

    public function testUserCanSeeCarsThatBelongToIt(): void
    {
        Passport::actingAs($this->authUser);

        $carId = $this->car->id;
        $response = $this->actingAs($this->user)->get(sprintf(self::URL_PATTERN, $carId));

        $response->assertStatus(Response::HTTP_OK);
        $response->assertJsonFragment([
            'id' => $carId
        ]);
    }

    public function testUserCanDeleteOwnCar(): void
    {
        $repositoryMock = Mockery::mock(CarRepositoryContract::class)
            ->expects('delete')
            ->getMock();

        $this->instance(CarRepositoryContract::class, $repositoryMock);

        Passport::actingAs($this->authUser);

        $carId = $this->car->id;
        $response = $this->actingAs($this->user)->delete(sprintf(self::URL_PATTERN, $carId));

        $response->assertStatus(Response::HTTP_OK);
    }
}
